Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 2498 (0) rows, 999 (-1) columns and 5993 (-1) elements
Clp1000I sum of infeasibilities 4.65312e-06 - average 1.86274e-09, 781 fixed columns
Coin0506I Presolve 166 (-2332) rows, 199 (-801) columns and 529 (-5465) elements
Clp0029I End of values pass after 199 iterations
Clp0029I End of values pass after 297 iterations
Clp0014I Perturbing problem by 0.001% of 2.5629266 - largest nonzero change 3.4960729e-05 ( 0.0015636088%) - largest zero change 2.5816127e-05
Clp0000I Optimal - objective value 2247.0588
Clp0000I Optimal - objective value 2247.0588
Coin0511I After Postsolve, objective 2247.0588, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 2.9750179 - largest nonzero change 3.8872194e-05 ( 0.0015962058%) - largest zero change 2.5242541e-05
Clp0000I Optimal - objective value 2247.6471
Clp0000I Optimal - objective value 2247.6471
Clp0000I Optimal - objective value 2247.6471
Clp0032I Optimal objective 2247.647059 - 0 iterations time 0.122, Idiot 0.12

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 63 strengthened rows, 0 substitutions
Cgl0004I processed model has 2456 rows, 999 columns (999 integer (998 of which binary)) and 5930 elements
Coin3009W Conflict graph built in 0.001 seconds, density: 0.175%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 8 integers unsatisfied sum - 3.05882
Cbc0038I Solution found of -2227
Cbc0038I Cleaned solution of -2227
Cbc0038I Before mini branch and bound, 991 integers at bound fixed and 0 continuous
Cbc0038I Full problem 2456 rows 999 columns, reduced to 9 rows 8 columns
Cbc0038I Mini branch and bound improved solution from -2227 to -2240 (0.08 seconds)
Cbc0038I Round again with cutoff of -2241.66
Cbc0038I Reduced cost fixing fixed 772 variables on major pass 2
Cbc0038I Pass   1: suminf.    0.39634 (1) obj. -2241.66 iterations 28
Cbc0038I Pass   2: suminf.    0.48148 (1) obj. -2244.81 iterations 1
Cbc0038I Pass   3: suminf.    0.73930 (2) obj. -2241.66 iterations 29
Cbc0038I Pass   4: suminf.    0.20715 (1) obj. -2241.66 iterations 24
Cbc0038I Pass   5: suminf.    0.22222 (1) obj. -2242.22 iterations 1
Cbc0038I Pass   6: suminf.    0.72338 (2) obj. -2241.66 iterations 37
Cbc0038I Pass   7: suminf.    0.18012 (1) obj. -2241.66 iterations 17
Cbc0038I Pass   8: suminf.    0.18519 (1) obj. -2241.85 iterations 1
Cbc0038I Pass   9: suminf.    0.16646 (2) obj. -2241.66 iterations 24
Cbc0038I Pass  10: suminf.    0.16646 (2) obj. -2241.66 iterations 27
Cbc0038I Pass  11: suminf.    0.25000 (1) obj. -2242.5 iterations 4
Cbc0038I Pass  12: suminf.    0.18012 (1) obj. -2241.66 iterations 2
Cbc0038I Pass  13: suminf.    0.18519 (1) obj. -2241.85 iterations 1
Cbc0038I Pass  14: suminf.    0.43477 (2) obj. -2241.66 iterations 32
Cbc0038I Pass  15: suminf.    0.16646 (2) obj. -2241.66 iterations 39
Cbc0038I Pass  16: suminf.    0.18182 (1) obj. -2241.82 iterations 4
Cbc0038I Pass  17: suminf.    0.58508 (2) obj. -2241.66 iterations 25
Cbc0038I Pass  18: suminf.    0.16646 (2) obj. -2241.66 iterations 21
Cbc0038I Pass  19: suminf.    0.18182 (1) obj. -2241.82 iterations 4
Cbc0038I Pass  20: suminf.    0.49815 (2) obj. -2241.66 iterations 33
Cbc0038I Pass  21: suminf.    0.49815 (2) obj. -2241.66 iterations 6
Cbc0038I Pass  22: suminf.    0.20715 (1) obj. -2241.66 iterations 18
Cbc0038I Pass  23: suminf.    0.22222 (1) obj. -2242.22 iterations 1
Cbc0038I Pass  24: suminf.    0.83600 (8) obj. -2241.66 iterations 24
Cbc0038I Pass  25: suminf.    0.16646 (2) obj. -2241.66 iterations 15
Cbc0038I Pass  26: suminf.    0.25000 (1) obj. -2242.5 iterations 5
Cbc0038I Pass  27: suminf.    0.18012 (1) obj. -2241.66 iterations 2
Cbc0038I Pass  28: suminf.    0.18519 (1) obj. -2241.85 iterations 1
Cbc0038I Pass  29: suminf.    0.49815 (2) obj. -2241.66 iterations 28
Cbc0038I Pass  30: suminf.    0.49815 (2) obj. -2241.66 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 951 integers at bound fixed and 0 continuous
Cbc0038I Full problem 2456 rows 999 columns, reduced to 19 rows 33 columns
Cbc0038I Mini branch and bound did not improve solution (0.19 seconds)
Cbc0038I After 0.19 seconds - Feasibility pump exiting with objective of -2240 - took 0.12 seconds
Cbc0012I Integer solution of -2240 found by feasibility pump after 0 iterations and 0 nodes (0.19 seconds)
Cbc0038I Full problem 2456 rows 999 columns, reduced to 9 rows 8 columns
Cbc0031I 1 added rows had average density of 998
Cbc0013I At root node, 1 cuts changed objective from -2247.6471 to -2247.6471 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 16 column cuts (16 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 3 row cuts average 997.3 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0038I Full problem 2456 rows 999 columns, reduced to 2 rows 5 columns
Cbc0038I Full problem 2457 rows 999 columns, reduced to 112 rows 155 columns
Cbc0044I Reduced cost fixing - 112 rows, 155 columns - restarting search
Cbc0012I Integer solution of -1542 found by Previous solution after 0 iterations and 0 nodes (0.48 seconds)
Cbc0012I Integer solution of -2180 found by DiveCoefficient after 0 iterations and 0 nodes (0.48 seconds)
Cbc0038I Full problem 112 rows 155 columns, reduced to 9 rows 8 columns
Cbc0012I Integer solution of -2240 found by RINS after 0 iterations and 0 nodes (0.49 seconds)
Cbc0031I 2 added rows had average density of 151
Cbc0013I At root node, 4 cuts changed objective from -2247.6471 to -2240 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3 row cuts average 151.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 3 row cuts average 151.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 2 row cuts average 153.5 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is 1
Cbc0014I Cut generator 10 (Stored from first) - 1 row cuts average 154.0 elements, 0 column cuts (0 active)
Cbc0001I Search completed - best objective -2240, took 12 iterations and 0 nodes (0.55 seconds)
Cbc0035I Maximum depth 0, 1 variables fixed on reduced cost
Cbc0038I Probing was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I Gomory was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I Knapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I Clique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I OddWheel was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I MixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I FlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I TwoMirCuts was tried 2 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I ZeroHalf was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
Cbc0038I Stored from first was tried 2 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0001I SearResolution status: OPTIMAL

Resolution time (sec) : 0.694

----------------------------------

Result; test_1000_1000_r0.005-0.dat; 0.694; OptimizationStatus.OPTIMAL; 2240.0

ch completed - best objective -2240, took 118 iterations and 50 nodes (0.56 seconds)
Cbc0032I Strong branching done 128 times (372 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 13, 877 variables fixed on reduced cost
Total time (CPU seconds):       0.41   (Wallclock seconds):       0.56

