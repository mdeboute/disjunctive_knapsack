Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 1248 (-1247) rows, 500 (0) columns and 2994 (-2494) elements
Clp1000I sum of infeasibilities 4.8014e-07 - average 3.84728e-10, 13 fixed columns
Coin0506I Presolve 1207 (-41) rows, 487 (-13) columns and 2899 (-95) elements
Clp0029I End of values pass after 487 iterations
Clp0014I Perturbing problem by 0.001% of 2.9689867 - largest nonzero change 3.9549554e-05 ( 0.0015238193%) - largest zero change 2.982246e-05
Clp0000I Optimal - objective value 3098.4615
Clp0000I Optimal - objective value 3098.4615
Coin0511I After Postsolve, objective 3098.4615, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 3098.4615
Clp0000I Optimal - objective value 3098.4615
Clp0000I Optimal - objective value 3098.4615
Coin0511I After Postsolve, objective 3098.4615, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 3098.461538 - 0 iterations time 0.112, Presolve 0.00, Idiot 0.11

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 50 strengthened rows, 0 substitutions
Cgl0004I processed model has 1215 rows, 500 columns (500 integer (500 of which binary)) and 2945 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.349%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 1 integers unsatisfied sum - 0.153846
Cbc0038I Pass   1: suminf.    0.15385 (1) obj. -3098.46 iterations 87
Cbc0038I Solution found of -3057
Cbc0038I Before mini branch and bound, 499 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1215 rows 500 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I Round again with cutoff of -3062.05
Cbc0038I Pass   2: suminf.    0.15385 (1) obj. -3098.46 iterations 0
Cbc0038I Pass   3: suminf.    0.04587 (1) obj. -3062.05 iterations 3
Cbc0038I Pass   4: suminf.    0.33000 (1) obj. -3093.3 iterations 2
Cbc0038I Pass   5: suminf.    0.79539 (2) obj. -3062.05 iterations 54
Cbc0038I Pass   6: suminf.    0.48980 (1) obj. -3064.9 iterations 33
Cbc0038I Pass   7: suminf.    0.23678 (1) obj. -3062.05 iterations 4
Cbc0038I Pass   8: suminf.    0.24000 (1) obj. -3062.4 iterations 2
Cbc0038I Pass   9: suminf.    1.75915 (4) obj. -3062.05 iterations 82
Cbc0038I Pass  10: suminf.    0.40816 (1) obj. -3064.08 iterations 62
Cbc0038I Pass  11: suminf.    0.20461 (2) obj. -3062.05 iterations 6
Cbc0038I Pass  12: suminf.    0.24096 (1) obj. -3062.41 iterations 3
Cbc0038I Pass  13: suminf.    3.00029 (7) obj. -3062.05 iterations 74
Cbc0038I Pass  14: suminf.    0.36735 (1) obj. -3066.33 iterations 65
Cbc0038I Pass  15: suminf.    0.30042 (1) obj. -3062.05 iterations 4
Cbc0038I Pass  16: suminf.    0.31000 (1) obj. -3063.1 iterations 2
Cbc0038I Pass  17: suminf.    0.51220 (2) obj. -3062.05 iterations 89
Cbc0038I Pass  18: suminf.    0.20461 (2) obj. -3062.05 iterations 68
Cbc0038I Pass  19: suminf.    0.29787 (1) obj. -3062.98 iterations 3
Cbc0038I Pass  20: suminf.    0.20461 (2) obj. -3062.05 iterations 8
Cbc0038I Pass  21: suminf.    0.29787 (1) obj. -3062.98 iterations 3
Cbc0038I Pass  22: suminf.    0.55754 (2) obj. -3062.05 iterations 82
Cbc0038I Pass  23: suminf.    0.20461 (2) obj. -3062.05 iterations 47
Cbc0038I Pass  24: suminf.    0.30435 (1) obj. -3063.04 iterations 2
Cbc0038I Pass  25: suminf.    0.36851 (3) obj. -3062.05 iterations 83
Cbc0038I Pass  26: suminf.    0.20461 (2) obj. -3062.05 iterations 53
Cbc0038I Pass  27: suminf.    0.46939 (1) obj. -3065.31 iterations 20
Cbc0038I Pass  28: suminf.    0.46939 (1) obj. -3065.31 iterations 0
Cbc0038I Pass  29: suminf.    0.25496 (1) obj. -3062.05 iterations 2
Cbc0038I Pass  30: suminf.    0.26000 (1) obj. -3062.6 iterations 1
Cbc0038I Pass  31: suminf.    0.35381 (2) obj. -3062.05 iterations 99
Cbc0038I Rounding solution of -3069 is better than previous of -3057

Cbc0038I Before mini branch and bound, 420 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1215 rows 500 columns, reduced to 37 rows 69 columns
Cbc0038I Mini branch and bound improved solution from -3069 to -3090 (0.13 seconds)
Cbc0038I Round again with cutoff of -3092.49
Cbc0038I Reduced cost fixing fixed 188 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.15385 (1) obj. -3098.46 iterations 0
Cbc0038I Pass  32: suminf.    0.49297 (1) obj. -3092.49 iterations 3
Cbc0038I Pass  33: suminf.    0.45000 (1) obj. -3095.5 iterations 2
Cbc0038I Pass  34: suminf.    0.75078 (2) obj. -3092.49 iterations 90
Cbc0038I Pass  35: suminf.    0.31111 (1) obj. -3093.11 iterations 77
Cbc0038I Pass  36: suminf.    0.24922 (2) obj. -3092.49 iterations 12
Cbc0038I Pass  37: suminf.    0.27451 (1) obj. -3092.75 iterations 9
Cbc0038I Pass  38: suminf.    1.04363 (3) obj. -3092.49 iterations 98
Cbc0038I Pass  39: suminf.    1.04363 (3) obj. -3092.49 iterations 17
Cbc0038I Pass  40: suminf.    0.48837 (1) obj. -3095.12 iterations 62
Cbc0038I Pass  41: suminf.    0.34989 (1) obj. -3092.49 iterations 3
Cbc0038I Pass  42: suminf.    0.36667 (1) obj. -3093.67 iterations 2
Cbc0038I Pass  43: suminf.    0.75078 (2) obj. -3092.49 iterations 70
Cbc0038I Pass  44: suminf.    0.30233 (1) obj. -3093.02 iterations 63
Cbc0038I Pass  45: suminf.    0.24922 (2) obj. -3092.49 iterations 17
Cbc0038I Pass  46: suminf.    0.28261 (1) obj. -3092.83 iterations 2
Cbc0038I Pass  47: suminf.    0.75078 (2) obj. -3092.49 iterations 101
Cbc0038I Pass  48: suminf.    0.30435 (1) obj. -3093.04 iterations 86
Cbc0038I Pass  49: suminf.    0.24922 (2) obj. -3092.49 iterations 8
Cbc0038I Pass  50: suminf.    0.30435 (1) obj. -3093.04 iterations 2
Cbc0038I Pass  51: suminf.    0.75078 (2) obj. -3092.49 iterations 83
Cbc0038I Pass  52: suminf.    0.30435 (1) obj. -3093.04 iterations 77
Cbc0038I Pass  53: suminf.    2.00817 (5) obj. -3092.49 iterations 65
Cbc0038I Pass  54: suminf.    1.24223 (3) obj. -3092.49 iterations 25
Cbc0038I Pass  55: suminf.    0.43902 (1) obj. -3094.39 iterations 66
Cbc0038I Pass  56: suminf.    0.29275 (1) obj. -3092.49 iterations 3
Cbc0038I Pass  57: suminf.    0.30000 (1) obj. -3093 iterations 2
Cbc0038I Pass  58: suminf.    0.75078 (2) obj. -3092.49 iterations 79
Cbc0038I Pass  59: suminf.    0.31707 (1) obj. -3093.17 iterations 68
Cbc0038I Pass  60: suminf.    0.24922 (2) obj. -3092.49 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 464 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1215 rows 500 columns, reduced to 8 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (0.19 seconds)
Cbc0038I After 0.19 seconds - Feasibility pump exiting with objective of -3090 - took 0.14 seconds
Cbc0012I Integer solution of -3090 found by feasibility pump after 0 iterations and 0 nodes (0.19 seconds)
Cbc0038I Full problem 1215 rows 500 columns, reduced to 2 rows 7 columns
Cbc0031I 1 added rows had average density of 499
Cbc0013I At root node, 1 cuts changed objective from -3098.4615 to -3098.4615 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 5 column cuts (5 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 499.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0038I Full problem 1215 rows 500 columns, reduced to 4 rows 10 columns
Cbc0038I Full problem 1216 rows 500 columns, reduced to 546 rows 322 columns
Cbc0044I Reduced cost fixing - 546 rows, 322 columns - restarting search
Cbc0012I Integer solution of -3090 found by Previous solution after 0 iterations and 0 nodes (0.38 seconds)
Cbc0038I Full problem 546 rows 322 columns, reduced to 2 rows 7 columns
Cbc0031I 2 added rows had average density of 297
Cbc0013I At root node, 4 cuts changed objective from -3098.4615 to -3090 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 19 column cuts (19 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.00Resolution status: OPTIMAL

Resolution time (sec) : 0.534

----------------------------------

Result; test_500_2000_r0.01-0.dat; 0.534; OptimizationStatus.OPTIMAL; 3090.0

0 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 2 row cuts average 297.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 321.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 10 (Stored from first) - 1 row cuts average 321.0 elements, 0 column cuts (0 active)
Cbc0001I Search completed - best objective -3090, took 0 iterations and 0 nodes (0.40 seconds)
Cbc0035I Maximum depth 0, 4 variables fixed on reduced cost
Cbc0038I Probing was tried 1 times and created 19 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I Gomory was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I Knapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I Clique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I OddWheel was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I MixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I FlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I TwoMirCuts was tried 1 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Cbc0038I ZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I Stored from first was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0001I Search completed - best objective -3090, took 427 iterations and 50 nodes (0.40 seconds)
Cbc0032I Strong branching done 196 times (1656 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 12, 499 variables fixed on reduced cost
Total time (CPU seconds):       0.39   (Wallclock seconds):       0.41

