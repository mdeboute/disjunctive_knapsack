Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 6238 (0) rows, 500 (0) columns and 12974 (0) elements
Clp1000I sum of infeasibilities 5.52329e-06 - average 8.85426e-10, 148 fixed columns
Coin0506I Presolve 3129 (-3109) rows, 352 (-148) columns and 6608 (-6366) elements
Clp0029I End of values pass after 352 iterations
Clp0014I Perturbing problem by 0.001% of 2.1405725 - largest nonzero change 3.1387683e-05 ( 0.001816872%) - largest zero change 0
Clp0000I Optimal - objective value 2985.75
Clp0000I Optimal - objective value 2985.75
Coin0511I After Postsolve, objective 2985.75, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 2985.75
Clp0000I Optimal - objective value 2985.75
Clp0000I Optimal - objective value 2985.75
Clp0032I Optimal objective 2985.75 - 0 iterations time 0.352, Idiot 0.35

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 2341 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1614 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 576 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 29 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 15 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 4119 rows, 500 columns (500 integer (500 of which binary)) and 11103 elements
Coin3009W Conflict graph built in 0.001 seconds, density: 1.346%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 239 integers unsatisfied sum - 87.4461
Cbc0038I Solution found of -1204
Cbc0038I Before mini branch and bound, 261 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4119 rows 500 columns, reduced to 1310 rows 239 columns
Cbc0038I Mini branch and bound improved solution from -1204 to -2170 (1.68 seconds)
Cbc0038I Round again with cutoff of -2242.44
Cbc0038I Pass   1: (1.84 seconds) suminf.    0.29194 (1) obj. -2242.44 iterations 1418
Cbc0038I Pass   2: (1.84 seconds) suminf.    0.29194 (1) obj. -2242.44 iterations 10
Cbc0038I Solution found of -2292
Cbc0038I Rounding solution of -2490 is better than previous of -2292

Cbc0038I Before mini branch and bound, 249 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4119 rows 500 columns, reduced to 1436 rows 251 columns
Cbc0038I Mini branch and bound improved solution from -2490 to -2536 (3.60 seconds)
Cbc0038I Round again with cutoff of -2606.67
Cbc0038I Pass   3: (3.61 seconds) suminf.    0.02131 (3) obj. -2606.67 iterations 72
Cbc0038I Solution found of -2608
Cbc0038I Rounding solution of -2651 is better than previous of -2608

Cbc0038I Before mini branch and bound, 247 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4119 rows 500 columns, reduced to 1455 rows 253 columns
Cbc0038I Mini branch and bound did not improve solution (4.77 seconds)
Cbc0038I Round again with cutoff of -2722.01
Cbc0038I Pass   4: (4.92 seconds) suminf.    7.05710 (452) obj. -2722.01 iterations 963
Cbc0038I Pass   5: (5.06 seconds) suminf.    5.87355 (475) obj. -2722.01 iterations 746
Cbc0038I Pass   6: (5.21 seconds) suminf.    2.74065 (299) obj. -2722.01 iterations 832
Cbc0038I Pass   7: (5.25 seconds) suminf.    2.69533 (287) obj. -2722.01 iterations 237
Cbc0038I Pass   8: (5.49 seconds) suminf.    4.69340 (393) obj. -2722.01 iterations 1471
Cbc0038I Pass   9: (5.56 seconds) suminf.    4.59968 (434) obj. -2722.01 iterations 357
Cbc0038I Pass  10: (5.73 seconds) suminf.    4.21790 (280) obj. -2722.01 iterations 1112
Cbc0038I Pass  11: (5.94 seconds) suminf.    1.45061 (434) obj. -2722.01 iterations 1181
Cbc0038I Pass  12: (6.11 seconds) suminf.    1.00305 (262) obj. -2722.01 iterations 1084
Cbc0038I Pass  13: (6.30 seconds) suminf.    5.35139 (325) obj. -2722.01 iterations 1223
Cbc0038I Pass  14: (6.36 seconds) suminf.    4.87085 (348) obj. -2722.01 iterations 340
Cbc0038I Pass  15: (6.63 seconds) suminf.    1.42557 (5) obj. -2722.01 iterations 2000
Cbc0038I Pass  16: (6.63 seconds) suminf.    1.42557 (5) obj. -2722.01 iterations 27
Cbc0038I Pass  17: (6.65 seconds) suminf.    1.54826 (4) obj. -2722.01 iterations 422
Cbc0038I Pass  18: (6.71 seconds) suminf.   13.95963 (209) obj. -2722.01 iterations 767
Cbc0038I Pass  19: (6.90 seconds) suminf.    2.13365 (7) obj. -2722.01 iterations 1273
Cbc0038I Pass  20: (6.90 seconds) suminf.    0.72269 (3) obj. -2722.01 iterations 21
Cbc0038I Pass  21: (6.91 seconds) suminf.    0.54851 (4) obj. -2722.01 iterations 394
Cbc0038I Pass  22: (6.92 seconds) suminf.    1.08601 (3) obj. -2722.01 iterations 306
Cbc0038I Pass  23: (7.02 seconds) suminf.    1.00581 (263) obj. -2722.01 iterations 901
Cbc0038I Pass  24: (7.09 seconds) suminf.    0.79923 (2) obj. -2722.01 iterations 663
Cbc0038I Pass  25: (7.09 seconds) suminf.    0.46875 (1) obj. -2725.31 iterations 150
Cbc0038I Pass  26: (7.09 seconds) suminf.    0.49993 (1) obj. -2722.01 iterations 23
Cbc0038I Pass  27: (7.13 seconds) suminf.   19.22734 (213) obj. -2722.01 iterations 520
Cbc0038I Pass  28: (7.25 seconds) suminf.    8.15790 (248) obj. -2722.01 iterations 815
Cbc0038I Pass  29: (7.26 seconds) suminf.    8.06126 (248) obj. -2722.01 iterations 52
Cbc0038I Pass  30: (7.30 seconds) suminf.    5.43910 (267) obj. -2722.01 iterations 211
Cbc0038I Pass  31: (7.37 seconds) suminf.    2.29952 (306) obj. -2722.01 iterations 405
Cbc0038I Pass  32: (7.39 seconds) suminf.    0.32258 (1) obj. -2726.77 iterations 324
Cbc0038I Pass  33: (7.39 seconds) suminf.    0.40360 (1) obj. -2722.01 iterations 8
Cbc0038I Rounding solution of -2688 is better than previous of -2651

Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4119 rows 500 columns, reduced to 4119 rows 500 columns - 4 fixed gives 3436, 428 - still too large
Cbc0038I Mini branch and bound did not improve solution (7.40 seconds)
Cbc0038I Round again with cutoff of -2771.01
Cbc0038I Pass  33: (7.57 seconds) suminf.   18.99271 (300) obj. -2771.01 iterations 772
Cbc0038I Pass  34: (7.65 seconds) suminf.   17.92044 (394) obj. -2771.01 iterations 494
Cbc0038I Pass  35: (7.73 seconds) suminf.   16.87529 (228) obj. -2771.01 iterations 510
Cbc0038I Pass  36: (7.76 seconds) suminf.   16.13791 (261) obj. -2771.01 iterations 136
Cbc0038I Pass  37: (7.80 seconds) suminf.   14.65203 (241) obj. -2771.01 iterations 243
Cbc0038I Pass  38: (7.82 seconds) suminf.   14.41371 (268) obj. -2771.01 iterations 119
Cbc0038I Pass  39: (7.89 seconds) suminf.   18.15703 (303) obj. -2771.01 iterations 522
Cbc0038I Pass  40: (7.95 seconds) suminf.   17.96454 (336) obj. -2771.01 iterations 325
Cbc0038I Pass  41: (8.02 seconds) suminf.   19.69070 (248) obj. -2771.01 iterations 438
Cbc0038I Pass  42: (8.04 seconds) suminf.   19.43064 (258) obj. -2771.01 iterations 146
Cbc0038I Pass  43: (8.09 seconds) suminf.   18.60098 (248) obj. -2771.01 iterations 287
Cbc0038I Pass  44: (8.11 seconds) suminf.   18.14969 (265) obj. -2771.01 iterations 117
Cbc0038I Pass  45: (8.18 seconds) suminf.   17.59259 (276) obj. -2771.01 iterations 420
Cbc0038I Pass  46: (8.20 seconds) suminf.   17.33543 (314) obj. -2771.01 iterations 129
Cbc0038I Pass  47: (8.26 seconds) suminf.   16.00769 (255) obj. -2771.01 iterations 363
Cbc0038I Pass  48: (8.28 seconds) suminf.   15.84394 (267) obj. -2771.01 iterations 79
Cbc0038I Pass  49: (8.36 seconds) suminf.   18.14695 (266) obj. -2771.01 iterations 535
Cbc0038I Pass  50: (8.43 seconds) suminf.   43.14401 (204) obj. -2771.01 iterations 508
Cbc0038I Pass  51: (8.56 seconds) suminf.   19.86485 (376) obj. -2771.01 iterations 857
Cbc0038I Pass  52: (8.60 seconds) suminf.   19.00721 (375) obj. -2771.01 iterations 189
Cbc0038I Pass  53: (8.67 seconds) suminf.   19.13399 (374) obj. -2771.01 iterations 362
Cbc0038I Pass  54: (8.71 seconds) suminf.   18.42020 (361) obj. -2771.01 iterations 226
Cbc0038I Pass  55: (8.81 seconds) suminf.   22.18078 (248) obj. -2771.01 iterations 679
Cbc0038I Pass  56: (8.84 seconds) suminf.   20.62423 (252) obj. -2771.01 iterations 179
Cbc0038I Pass  57: (8.88 seconds) suminf.   19.49406 (270) obj. -2771.01 iterations 257
Cbc0038I Pass  58: (8.90 seconds) suminf.   19.24528 (256) obj. -2771.01 iterations 108
Cbc0038I Pass  59: (8.97 seconds) suminf.   19.53239 (265) obj. -2771.01 iterations 417
Cbc0038I Pass  60: (9.00 seconds) suminf.   19.52400 (276) obj. -2771.01 iterations 134
Cbc0038I Pass  61: (9.04 seconds) suminf.   19.38294 (272) obj. -2771.01 iterations 208
Cbc0038I Pass  62: (9.06 seconds) suminf.   19.19514 (290) obj. -2771.01 iterations 121
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 64 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4119 rows 500 columns, reduced to 3546 rows 436 columns - 4 fixed gives 2884, 380 - still too large
Cbc0038I Full problem 4119 rows 500 columns, reduced to 2884 rows 380 columns - too large
Cbc0038I Mini branch and bound did not improve solution (9.21 seconds)
Cbc0038I After 9.2Resolution status: TIMED OUT and CALCULATED FEASIBLE SOLUTION

Resolution time (sec) : 30.486

----------------------------------

Result; test_500_2000_r0.05-0.dat; 30.486; OptimizationStatus.FEASIBLE; 2688.0

1 seconds - Feasibility pump exiting with objective of -2688 - took 8.43 seconds
Cbc0012I Integer solution of -2688 found by feasibility pump after 0 iterations and 0 nodes (9.21 seconds)
Cbc0038I Full problem 4119 rows 500 columns, reduced to 1388 rows 250 columns
Cbc0031I 143 added rows had average density of 31.713287
Cbc0013I At root node, 143 cuts changed objective from -2885.3593 to -2848.5133 in 22 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.185 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 997 row cuts average 254.5 elements, 0 column cuts (0 active)  in 0.498 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 13 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.037 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 226 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.369 seconds - new frequency is 1
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.050 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 351 row cuts average 200.7 elements, 0 column cuts (0 active)  in 0.554 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 2350 row cuts average 7.5 elements, 0 column cuts (0 active)  in 1.129 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -2688 best solution, best possible -2848.5133 (17.42 seconds)
Cbc0010I After 1 nodes, 2 on tree, -2688 best solution, best possible -2848.5133 (19.28 seconds)
Cbc0010I After 2 nodes, 3 on tree, -2688 best solution, best possible -2848.5133 (21.63 seconds)
Cbc0010I After 3 nodes, 4 on tree, -2688 best solution, best possible -2848.5133 (23.64 seconds)
Cbc0010I After 4 nodes, 5 on tree, -2688 best solution, best possible -2848.5133 (25.49 seconds)
Cbc0010I After 5 nodes, 6 on tree, -2688 best solution, best possible -2848.5133 (27.14 seconds)
Cbc0010I After 6 nodes, 7 on tree, -2688 best solution, best possible -2848.5133 (28.45 seconds)
Cbc0010I After 8 nodes, 9 on tree, -2688 best solution, best possible -2848.5133 (29.91 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective -2688 (best possible -2848.5133), took 11300 iterations and 9 nodes (30.02 seconds)
Cbc0032I Strong branching done 198 times (18889 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 8, 0 variables fixed on reduced cost
Total time (CPU seconds):       29.04   (Wallclock seconds):       30.09

